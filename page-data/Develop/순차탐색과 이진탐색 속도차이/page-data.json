{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/Develop/순차탐색과 이진탐색 속도차이/","result":{"data":{"site":{"siteMetadata":{"title":"Develop Blog","authorNickName":"Mr.Jun"}},"markdownRemark":{"id":"78dab8d7-918a-5ee8-ac72-e0b8a0a28608","excerpt":"Spring을 이용해 순차탐색과 이진탐색의 속도차이를 재보았다. Controller와 Service를 분리하고 AOP도 적용해보았다. SearchController.java Search.java SearchImpl.java…","html":"<p>Spring을 이용해 순차탐색과 이진탐색의 속도차이를 재보았다.</p>\n<p>Controller와 Service를 분리하고 AOP도 적용해보았다.</p>\n<p><strong>SearchController.java</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">kr<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>exam<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">kr<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>exam<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Search</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SearchController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Search</span> search<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token comment\">// Search 객체가 존재하는지를 확인한 후에 그 객체를 변수에 주입한다.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSearch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Search</span> search<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>search <span class=\"token operator\">=</span> search<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// URL 패턴을 매핑하여 해당 메소드를 실행한다.</span>\n    <span class=\"token comment\">// URL이 localhost:8080/search 일 때 아래 test 메소드 수행</span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/search\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        search<span class=\"token punctuation\">.</span><span class=\"token class-name\">SequentialSearch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        search<span class=\"token punctuation\">.</span><span class=\"token class-name\">BinarySearch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"search\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Search.java</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">kr<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>exam<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 순차, 이진탐색을 위한 인터페이스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Search</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> <span class=\"token class-name\">BinarySearch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token class-name\">SequentialSearch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>SearchImpl.java</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">kr<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>exam<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Service임을 명시</span>\n<span class=\"token comment\">// ComponentScan을 통해 빈으로 등록된다.</span>\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SearchImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Search</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> key <span class=\"token operator\">=</span> <span class=\"token number\">9999999</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 객체가 생성될 때 랜덤한 수들을 리스트에 넣는다.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SearchImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">// data.add((int)(Math.random() * 10000 + 1));</span>\n            data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Collections.sort(data);</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 순차 탐색을 수행한다.</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">SequentialSearch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        data<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// TimeMeasure에서 본 함수가 실행되었음을 표기하기위해 String으로 반환</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"SequentialSearch\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 정렬 ~ 이진탐색까지 시간측정에 넣었다.</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">BinarySearch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// TimeMeasure에서 본 함수가 실행되었음을 표기하기위해 String으로 반환</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"BinarySearch\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>시간을 측정하는 부분이 순차탐색, 이진탐색 두 메소드의 공통된 기능이므로 TimeMeasure.java로 기능을 분리했다.</p>\n<p><strong>TimeMeasure.java</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">kr<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>exam<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Around</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Aspect</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// AOP임을 명시하기 위한 어노테이션</span>\n<span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token comment\">// Component로 등록함으로써 dispatcher-servlet.xml에서 설정해둔 Component scan에서 해당 클래스를 찾아 빈으로 등록</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeMeasure</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 해당 객체의 메소드 실행 전, 후에 공통 기능을 수행하기 위해 @Around 사용</span>\n    <span class=\"token comment\">// execution 문은 \"kr.org.exam.search.. 패키지 아래에 있는 모든 파일 중 Search라는 이름의 메소드 중 파라미터가 0개 이상인 것이 실행될 때\" 를 의미한다.</span>\n    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* kr.org.exam.search.service.*.*Search(..))\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Around 어드바이스를 구현한 메소드는 ProceedingJoinPoint를 반드시 첫 번째 파라미터로 지정해야한다.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">measure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">double</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// joinPoint.proceed()를 기준으로 윗부분은 Before, 아래부분은 AfterThrowing 부분으로 구분지어진다.</span>\n        <span class=\"token comment\">// proceed()의 리턴값이 Object이므로 아래 result변수를 Object로 설정했다.</span>\n        <span class=\"token comment\">// Aspect로 연결된 본래 메소드의 리턴값을 형변환하여 받을 수 있다.</span>\n        <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> stop <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// joinPoint.proceed()는 대상 포인트컷 수행 결과값을 반환한다. (해당 메소드의 return값을 반환)</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stop <span class=\"token operator\">-</span> start <span class=\"token operator\">+</span> <span class=\"token string\">\"ns\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이론만보다가 실습해보니 정말 많이 모르고있었던것을 알수있었다.</p>\n<p>추가로 view단에 Controller의 값을 넘기는것은 아직 모르겠다..</p>","frontmatter":{"title":"[Develop] 순차탐색과 이진탐색 속도차이","date":"2020-03-07","category":"Develop","tags":["Develop","Spring"],"cover":{"childImageSharp":{"fluid":{"src":"/static/65d4f18c49f43a2bc316eab364e7c792/46604/develop.png"}}}}}},"pageContext":{"slug":"/Develop/순차탐색과 이진탐색 속도차이/","previous":{"fields":{"slug":"/Algorithm/1032/"},"frontmatter":{"title":"백준 1032 : 명령프롬프트","tags":["algorithm"],"category":"Algorithm","date":"2020-02-21","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}},"next":{"fields":{"slug":"/Daily/Spring 첫 실습/"},"frontmatter":{"title":"[Daily] Spring 첫 실습","tags":["Daily","Spring"],"category":"Daily","date":"2020-03-07","cover":{"childImageSharp":{"fixed":{"src":"/static/5c5c2df6f406f24a61aa7d532d8fbee7/31987/daily.png"}}}}},"recent":[{"node":{"fields":{"slug":"/Develop/org.apache.el.parser.ParseException/"},"frontmatter":{"title":"[Develop] org.apache.el.parser.ParseException","tags":["Develop","Error"],"category":"Develop","date":"2020-03-28","cover":{"childImageSharp":{"fixed":{"src":"/static/65d4f18c49f43a2bc316eab364e7c792/31987/develop.png"}}}}}},{"node":{"fields":{"slug":"/Develop/python으로 웹 크롤링하기/"},"frontmatter":{"title":"[Develop] python으로 웹 크롤링하기","tags":["Develop","Python"],"category":"Develop","date":"2020-03-22","cover":{"childImageSharp":{"fixed":{"src":"/static/65d4f18c49f43a2bc316eab364e7c792/31987/develop.png"}}}}}},{"node":{"fields":{"slug":"/Develop/cannot resolve web.servlet.view.InternalResourceViewResolver/"},"frontmatter":{"title":"[Develop] log4j 정리","tags":["Develop","Jsp"],"category":"Develop","date":"2020-03-15","cover":{"childImageSharp":{"fixed":{"src":"/static/65d4f18c49f43a2bc316eab364e7c792/31987/develop.png"}}}}}},{"node":{"fields":{"slug":"/Develop/오류탐색기록/"},"frontmatter":{"title":"[Develop] 오류탐색기록","tags":["Develop","Error"],"category":"Develop","date":"2020-03-13","cover":{"childImageSharp":{"fixed":{"src":"/static/65d4f18c49f43a2bc316eab364e7c792/31987/develop.png"}}}}}}]}},"staticQueryHashes":["1643656590","2512624605","58195306","765161310"]}