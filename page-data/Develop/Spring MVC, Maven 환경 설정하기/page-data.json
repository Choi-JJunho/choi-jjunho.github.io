{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/Develop/Spring MVC, Maven 환경 설정하기/","result":{"data":{"site":{"siteMetadata":{"title":"Develop Blog","authorNickName":"Mr.Jun"}},"markdownRemark":{"id":"c41f390d-66bc-5f80-8eb5-ad2f05b8c32a","excerpt":"본 포스팅은 WHITEPAEK 님의 글을 참고하여 작성했습니다. Spring 입문자로써 IntelliJ환경에 Spring환경을 설정하고 싶어 이곳 저곳 찾아보게 되었고 whitepaek…","html":"<p>본 포스팅은 <a href=\"https://whitepaek.tistory.com/\">WHITEPAEK</a> 님의 글을 참고하여 작성했습니다.</p>\n<p>Spring 입문자로써 IntelliJ환경에 Spring환경을 설정하고 싶어 이곳 저곳 찾아보게 되었고 whitepaek님의 포스팅을 참고하여 실습을 진행할 수 있게 되었다.</p>\n<p>개인적으로 복습하면서 한번 더 정리하고자 포스팅을 진행하게 되었다.</p>\n<p>Spring은 3.2.18버전으로 설정하고자한다.</p>\n<p>OS : Window 10</p>\n<p>Database : Mysql 8.0.18</p>\n<p>Server : Tomcat 7.0.99ver</p>\n<hr>\n<p><strong>&#x3C;Maven 프로젝트 생성></strong></p>\n<p><strong>1. Create New Project - Maven 프로젝트 클릭 - JDK 버전 설정 - Create from archetype 체크 X - Next</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bnazc8/btqBUAkbYdT/kJcxLweQzO8nHmWbQMRVfK/img.png\" alt=\"img\">[그림 1.1] Maven 프로젝트 생성</p>\n<hr>\n<p><strong>2. GroupId, ArtifactId 설정 - Finish</strong></p>\n<p><strong>GroupId :</strong> 프로젝트를 식별해주는 고유 ID (프로젝트에서 컨트롤하는 도메인 이름과 동일하게 입력한다.)</p>\n<p><strong>ArtifactId :</strong> 버전 정보를 생략한 이름 (프로젝트 이름과 동일하게 입력한다.)</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bjGgnM/btqBUzS5lXy/itP2dea326aEbzwvQqfGC0/img.png\" alt=\"img\">[그림 1.2] GroupId, ArtifactId 설정</p>\n<hr>\n<p><strong>3. Enable Auto-Import 클릭</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/dohHJE/btqBS5kDYh0/3dvdLrAgWHUs1czXgRe841/img.png\" alt=\"img\">[그림 1.3] Maven 프로젝트</p>\n<hr>\n<p><strong><em>\\</em>&#x3C;Spring Framework 설정>**</strong></p>\n<p><strong>1. Root 디렉토리 SpringMVCMavenProject에서 마우스 우클릭 - Add Framework Supprot… 클릭</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/GUiE2/btqBVfzQKLZ/iv3dTr438hQ3tVJpbQ5m50/img.png\" alt=\"img\">[그림 2.1] 스프링 프레임워크 설정</p>\n<hr>\n<p><strong>2. Spring MVC 클릭 - Configure.. 클릭</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bvyYpb/btqBS6jz2UR/e7hmLlndhjzMBFiSoukKQ1/img.png\" alt=\"img\">[그림 2.2.1] 버전 설정</p>\n<hr>\n<p><strong>3.1 3.2.18버전 선택 - OK</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bFP98M/btqBRvqFQsB/QX7kIAHZAH6BGm1nDYHkhk/img.png\" alt=\"img\">[그림 2.2.2] 3.xx버전으로 설정</p>\n<p><strong>3.2 Spring탭 - Configure… - 3.2.18버전 선택 - OK</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/rUJt3/btqBPYfVzt9/7blEjxTkqA1Sns4p15VKV0/img.png\" alt=\"img\">[그림 2.2.3] 버전 설정</p>\n<hr>\n<p><strong>4. Web 디렉터리가 추가되어있는 모습을 볼 수 있다.</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/wUeOs/btqBVgetrO6/q9F7HDsmmhNkKrcbICQ051/img.png\" alt=\"img\">[그림 2.3] web 디렉터리 추가됨</p>\n<hr>\n<p><strong>&#x3C;Tomcat 설정></strong></p>\n<p><strong>1. Add Configuration… 클릭</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bxihf8/btqBRvKVmI9/0RFNdxLtbv8F0guHJHFPaK/img.png\" alt=\"img\">[그림 3.1] AddConfiguration 클릭</p>\n<hr>\n<p><strong>2. Templates - Tomcat Server - Local 탭에서 Application server에 Tomcat을 추가해준다 - 우측 상단에 Create configuration 클릭</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bx3pdT/btqBQn7McF9/nbKW9bIhhGFEyhLxBWs3Jk/img.png\" alt=\"img\">[그림 3.2] 톰캣 설정</p>\n<hr>\n<p><strong>3. 우측 하단 Fix 버튼 클릭</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/xZcRk/btqBUALhRNo/3Lav63KVq3iq0uafCWUEbK/img.png\" alt=\"img\">[그림 3.3] 톰캣 Fix</p>\n<hr>\n<p><strong>4. Application context 경로를 / 로 설정</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/dK9C1x/btqBS6w6WNZ/ADUVUU8Ik4fL4RukSR9Ui1/img.png\" alt=\"img\">[그림 3.4] Application context 설정</p>\n<hr>\n<p><strong>5. 톰캣 설정 완료</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/RP66s/btqBVfs9rok/EHXYCN96k7H1uqUaYJcKWK/img.png\" alt=\"img\">[그림 3.5] 톰캣 설정 완료</p>\n<hr>\n<p><strong><em>\\</em>&#x3C;Lombok Plugin 설치>**</strong></p>\n<p><strong><em>\\</em>1. File - Settings - PluginsLombok Plugin 설치**</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/dOiMpE/btqBVeOvRrg/6iw7K2zHoVhGWZHFy9Pxtk/img.png\" alt=\"img\">[그림 4.1.1] File - Settings</p>\n<p><strong>Install후 IDE를 껐다 켠다.</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/1uOte/btqBTL0AYns/YLuxsUKIWEAiDekHVRbaK1/img.png\" alt=\"img\">[그림 4.1.2] Plugin - Lombok</p>\n<hr>\n<p><strong>&#x3C;Database 설정></strong></p>\n<p><strong>1. Mysql DB 설정하기</strong></p>\n<p><a href=\"https://dev.mysql.com/downloads/connector/j/\">https://dev.mysql.com/downloads/connector/j/</a></p>\n<p><strong>위 링크에서 MySQL Connector/J를 받는다.</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/ZXXxB/btqBSOcqp4J/ElWtLRCoZ7Z3XRL41jK2J1/img.png\" alt=\"img\">[그림 5.1.1] MySQL Community Downloads</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/2EBsj/btqBUUCMgpW/8kcvDVqJkUinoPY24oGAn1/img.png\" alt=\"img\">5[그림 5.1.2] MySQL Community Downloads</p>\n<hr>\n<p><strong>2. No thanks, just start my download로 다운로드를 계속한다.</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/dqQwPe/btqBVeOuVHM/hMygPYm10DJhjD94qpIlzk/img.png\" alt=\"img\">[그림 5.2] No thanks..</p>\n<hr>\n<p><strong>3. 폴더 내의 mysql-connector-java-8.xx.jar 파일의 위치를 잘 알아두자..!</strong></p>\n<p>ex) C:\\Users\\Downloads\\mysql-connector-java-8.0.19\\</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/7zNq1/btqBUALh4N8/puNvQEAzSNTkCGEqWZtyfK/img.png\" alt=\"img\">[그림 5.3] mysql-connector-java-8.xx 파일</p>\n<hr>\n<p><strong>4. Project Structure창으로 이동</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/H4Zor/btqBTMeahsr/u79Q7QK5wPss0p4vAJsf00/img.png\" alt=\"img\">[그림 5.4] Project Structure</p>\n<hr>\n<p><strong>5. Libraries탭 - +버튼 - Java 클릭 - mysql-connector-java-8.xx.jar 선택 - OK - OK - OK</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/c1ryKV/btqBVeHLLKd/QIKlFK7qQjBEP2Ilwy2a71/img.png\" alt=\"img\">[그림 5.5.1] mysql-connector~.jar 추가</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cBokZc/btqBUzlkdJG/kl89ank8LybdlxISOX0jw1/img.png\" alt=\"img\">[그림 5.5.2] mysql-connector~.jar 추가</p>\n<hr>\n<p><strong>&#x3C;pom.xml 설정></strong></p>\n<p><strong>1. pom.xml 설정</strong></p>\n<p><strong>프로젝트 설정, 라이브러리 의존성 설정, 빌드 설정을 할 수 있다.</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/m4Kff/btqBQ2oFLf9/8ZBwyAcqjKk1PTbE6y9nZ0/img.png\" alt=\"img\">[그림 6.1] pom.xml 설정</p>\n<hr>\n<p><strong>2. <project> … </project> 태그 사이에 코드를 입력한다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n            &lt;version&gt;${org.springframework-version}&lt;/version&gt;\n            &lt;exclusions&gt;\n                &lt;exclusion&gt;\n                    &lt;groupId&gt;commons-logging&lt;/groupId&gt;\n                    &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;\n                &lt;/exclusion&gt;\n            &lt;/exclusions&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n            &lt;version&gt;${org.springframework-version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;\n            &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;\n            &lt;version&gt;${org.aspectj-version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n            &lt;version&gt;${org.slf4j-version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;\n            &lt;version&gt;${org.slf4j-version}&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;\n            &lt;version&gt;${org.slf4j-version}&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;log4j&lt;/groupId&gt;\n            &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n            &lt;version&gt;1.2.17&lt;/version&gt;\n            &lt;exclusions&gt;\n                &lt;exclusion&gt;\n                    &lt;groupId&gt;javax.mail&lt;/groupId&gt;\n                    &lt;artifactId&gt;mail&lt;/artifactId&gt;\n                &lt;/exclusion&gt;\n                &lt;exclusion&gt;\n                    &lt;groupId&gt;javax.jms&lt;/groupId&gt;\n                    &lt;artifactId&gt;jms&lt;/artifactId&gt;\n                &lt;/exclusion&gt;\n                &lt;exclusion&gt;\n                    &lt;groupId&gt;com.sun.jdmk&lt;/groupId&gt;\n                    &lt;artifactId&gt;jmxtools&lt;/artifactId&gt;\n                &lt;/exclusion&gt;\n                &lt;exclusion&gt;\n                    &lt;groupId&gt;com.sun.jmx&lt;/groupId&gt;\n                    &lt;artifactId&gt;jmxri&lt;/artifactId&gt;\n                &lt;/exclusion&gt;\n            &lt;/exclusions&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\n            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;\n            &lt;version&gt;3.1.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;\n            &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;\n            &lt;version&gt;2.1&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\n            &lt;artifactId&gt;jstl&lt;/artifactId&gt;\n            &lt;version&gt;1.2&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;4.12&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n            &lt;version&gt;${org.springframework-version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.0&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;2.5.1&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;1.8&lt;/source&gt;\n                    &lt;target&gt;1.8&lt;/target&gt;\n                    &lt;compilerArgument&gt;-Xlint:all&lt;/compilerArgument&gt;\n                    &lt;showWarnings&gt;true&lt;/showWarnings&gt;\n                    &lt;showDeprecation&gt;true&lt;/showDeprecation&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;</code></pre></div>\n<p><img src=\"https://blog.kakaocdn.net/dn/kZ1Pe/btqBS5ruY8Y/D8d9GGh9TJUKCi5Mjywzfk/img.png\" alt=\"img\">[그림 6.2] pom.xml 라이브러리 의존성 설정</p>\n<hr>\n<p><strong>3. Project Structure - Artifacts탭 - Available Elements의 라이브러리 전부 더블클릭 - OK</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/3Byli/btqBS5EZ6Tx/rBbne9OX6NbbjffkoH1ylK/img.png\" alt=\"img\">[그림 6.3.1] 추가한 라이브러리 더블클릭</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bmiJ6W/btqBSPCnNKu/fn9hxaLNS9b3nsG0dotHpK/img.png\" alt=\"img\">[그림 6.3.2] 추가한 라이브러리 더블클릭</p>\n<hr>\n<p><strong>&#x3C;log4j.xml 파일 설정></strong></p>\n<p><strong>1. log4j.xml 파일 생성 및 설정</strong></p>\n<p><strong>src/main/resources/log4j.xml 파일을 만든다.</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/uh5Y5/btqBSPPVnK7/c28zg4vjQaHq2VBmIfXQk1/img.png\" alt=\"img\">[그림 7.1] 로그파일 설정</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE log4j:configuration PUBLIC &quot;-//APACHE//DTD LOG4J 1.2//EN&quot; &quot;log4j.dtd&quot;&gt;\n&lt;log4j:configuration xmlns:log4j=&quot;http://jakarta.apache.org/log4j/&quot;&gt;\n\n    &lt;appender name=&quot;console&quot; class=&quot;org.apache.log4j.ConsoleAppender&quot;&gt;\n        &lt;param name=&quot;Target&quot; value=&quot;System.out&quot; /&gt;\n        &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;\n            &lt;param name=&quot;ConversionPattern&quot; value=&quot;%-5p: %c - %m%n&quot; /&gt;\n        &lt;/layout&gt;\n    &lt;/appender&gt;\n\n    &lt;logger name=&quot;org.springframework.core&quot;&gt;\n        &lt;level value=&quot;info&quot; /&gt;\n    &lt;/logger&gt;\n\n    &lt;logger name=&quot;org.springframework.beans&quot;&gt;\n        &lt;level value=&quot;info&quot; /&gt;\n    &lt;/logger&gt;\n\n    &lt;logger name=&quot;org.springframework.context&quot;&gt;\n        &lt;level value=&quot;info&quot; /&gt;\n    &lt;/logger&gt;\n\n    &lt;logger name=&quot;org.springframework.web&quot;&gt;\n        &lt;level value=&quot;info&quot; /&gt;\n    &lt;/logger&gt;\n\n    &lt;!-- Root Logger --&gt;\n    &lt;root&gt;\n        &lt;priority value=&quot;info&quot; /&gt;\n        &lt;appender-ref ref=&quot;console&quot; /&gt;\n    &lt;/root&gt;\n\n&lt;/log4j:configuration&gt;</code></pre></div>\n<hr>\n<p><strong>&#x3C;Database 연동 테스트></strong></p>\n<p><strong>1. Mysql 데이터베이스가 정상적으로 연결되었는지 확인하는 테스트 코드를 작성한다.</strong></p>\n<p><strong>src/test/java/JDBCTest.class 를 생성한다.</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/DsZtv/btqBS6KHl6a/hyrK2yVmjXAcKIJSpyw7k1/img.png\" alt=\"img\">[그림 8.1] JDBCTest.class</p>\n<p><strong>아래 코드에서 line 22의 url 부분에서 dbname, root, password 부분은 자신의 환경에 맞게 적어주면 된다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import lombok.extern.log4j.Log4j;\nimport org.junit.Test;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\n\nimport static org.junit.Assert.fail;\n\n@Log4j\npublic class JDBCTest {\n    static {\n        try {\n            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    public void connection() {\n        try(Connection conn = DriverManager.getConnection(\n                &quot;jdbc:mysql://127.0.0.1:3306/dbname?serverTimezone=UTC&quot;, &quot;root&quot;, &quot;password&quot;)) {\n            log.info(conn);\n        } catch (Exception e) {\n            fail(e.getMessage());\n        }\n    }\n}</code></pre></div>\n<hr>\n<p><strong>2. Mysql을 실행한다.</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cJVl6t/btqBSPI8LJn/JCmc9K5zkBiygUhwCkI8Vk/img.png\" alt=\"img\">[그림 8.2] Mysql 실행하기</p>\n<hr>\n<p><strong>3. JDBCTest를 Run한다.</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/nqPkm/btqBUzS7CGF/4I0CKXSm3iQGKKbITYu2X1/img.png\" alt=\"img\">[그림 8.3] Run</p>\n<hr>\n<p><strong>4. 다음과 같이 Log가 뜨면 성공!</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bETM9L/btqBTLlX14H/qTYvrkcYQUCSpSJVUjLF2k/img.png\" alt=\"img\">[그림 8.4] 로그 확인</p>\n<hr>\n<p><strong>&#x3C;Spring MVC - Controller 테스트></strong></p>\n<p><strong>1. web/WEB-INF/web.xml 수정</strong></p>\n<p><strong><url-pattern>*.form</url-pattern>을 \\</strong><url-pattern>/</url-pattern>로 고친다.****</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;\n         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;\n         version=&quot;4.0&quot;&gt;\n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;/WEB-INF/applicationContext.xml&lt;/param-value&gt;\n    &lt;/context-param&gt;\n    &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n    &lt;/listener&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n&lt;/web-app&gt;</code></pre></div>\n<hr>\n<p><strong>2. src/main/java/com.mrjun.controller 패키지 생성 후 HelloController.class 생성</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cMQPUg/btqBUzZVTta/6jgeq0hwbKuBm0IlkpPupK/img.png\" alt=\"img\">[그림 9.1] HelloController</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">package com.mrjun.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\n@RequestMapping(&quot;/home/*&quot;)\npublic class HelloController {\n    @RequestMapping(method = RequestMethod.GET)\n    public @ResponseBody String homeTest() {\n        return &quot;Spring + Maven&quot;;\n    }\n}</code></pre></div>\n<hr>\n<p><strong>3. dispatcher-servlet.xml 파일에 아래 코드를 추가한다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    &lt;context:component-scan base-package=&quot;com.mrjun.controller&quot; /&gt;</code></pre></div>\n<p><img src=\"https://blog.kakaocdn.net/dn/bUTKLk/btqBQ2oG4gA/Dg8nkvvGRRNJHrkcgggXIK/img.png\" alt=\"img\">[그림 9.2.1] dispatcher-servlet.xml</p>\n<p><strong>위 처럼 빨간색 글자가 되면 “context”를 클릭하고 ALT + ENTER로 빠른 import를 해준다.</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/brl4c5/btqBS5SxHqj/pZkPcQslgB9jEHSnzZpkik/img.png\" alt=\"img\">[그림 9.2.2] dispatcher-servlet.xml - import</p>\n<hr>\n<p><strong>4. 오른쪽 위에서 톰캣으로 실행 설정을 해준 후 프로젝트를 실행한다.</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/brihPv/btqBPXajArJ/ikmA7aMy4qzx2tf87l38dk/img.png\" alt=\"img\">[그림 9.3] set Tomcat</p>\n<hr>\n<p><strong>5. 브라우저에 localhost:8080을 입력하면 web/index.jsp파일이 출력된다.</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/cJt9NG/btqBRvD99Di/DfEAm6NTupu1h1Gl3PJ651/img.png\" alt=\"img\">[그림 9.4.1] localhost:8080</p>\n<p><strong>추가로 localhost:8080/home/test를 입력하면 다음과 같이 HelloController에 해당하는 부분이 나온다!</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/Wrzs9/btqBSN5GA65/08GCS9dkQBKQo9w55EWYpk/img.png\" alt=\"img\">[그림 9.4.2] localhost:8080/home/test</p>\n<p><strong>*Reference</strong></p>\n<p><a href=\"https://whitepaek.tistory.com/41\">https://whitepaek.tistory.com/41</a></p>\n<p>[\n<a href=\"https://whitepaek.tistory.com/41\">IntelliJ] Spring MVC, Maven 프로젝트 설정 방법시작하기에 앞서.. 해당 포스트에서는 스프링에 대한 이론적인 설명은 작성하지 않았습니다. 이론적인 부분은 훌륭한 참고 서적이 많기 때문에 해당 서적을 구입하여 반복적으로 학습하는 것을 추천해 드립니다…whitepaek.tistory.com</a></p>","frontmatter":{"title":"[Develop] Spring MVC, Maven 환경 설정하기","date":"2020-02-11","category":"Develop","tags":["Develop","Spring"],"cover":{"childImageSharp":{"fluid":{"src":"/static/65d4f18c49f43a2bc316eab364e7c792/46604/develop.png"}}}}}},"pageContext":{"slug":"/Develop/Spring MVC, Maven 환경 설정하기/","previous":{"fields":{"slug":"/Algorithm/2164/"},"frontmatter":{"title":"백준 2164번 : 카드2","tags":["algorithm"],"category":"Algorithm","date":"2020-02-07","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}},"next":{"fields":{"slug":"/Algorithm/1159/"},"frontmatter":{"title":"백준 1159번 : 농구 경기","tags":["algorithm"],"category":"Algorithm","date":"2020-02-11","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}},"recent":[{"node":{"fields":{"slug":"/Develop/org.apache.el.parser.ParseException/"},"frontmatter":{"title":"[Develop] org.apache.el.parser.ParseException","tags":["Develop","Error"],"category":"Develop","date":"2020-03-28","cover":{"childImageSharp":{"fixed":{"src":"/static/65d4f18c49f43a2bc316eab364e7c792/31987/develop.png"}}}}}},{"node":{"fields":{"slug":"/Develop/python으로 웹 크롤링하기/"},"frontmatter":{"title":"[Develop] python으로 웹 크롤링하기","tags":["Develop","Python"],"category":"Develop","date":"2020-03-22","cover":{"childImageSharp":{"fixed":{"src":"/static/65d4f18c49f43a2bc316eab364e7c792/31987/develop.png"}}}}}},{"node":{"fields":{"slug":"/Develop/cannot resolve web.servlet.view.InternalResourceViewResolver/"},"frontmatter":{"title":"[Develop] log4j 정리","tags":["Develop","Jsp"],"category":"Develop","date":"2020-03-15","cover":{"childImageSharp":{"fixed":{"src":"/static/65d4f18c49f43a2bc316eab364e7c792/31987/develop.png"}}}}}},{"node":{"fields":{"slug":"/Develop/오류탐색기록/"},"frontmatter":{"title":"[Develop] 오류탐색기록","tags":["Develop","Error"],"category":"Develop","date":"2020-03-13","cover":{"childImageSharp":{"fixed":{"src":"/static/65d4f18c49f43a2bc316eab364e7c792/31987/develop.png"}}}}}}]}},"staticQueryHashes":["1643656590","2512624605","58195306","765161310"]}