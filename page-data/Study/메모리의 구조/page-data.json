{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/Study/메모리의 구조/","result":{"data":{"site":{"siteMetadata":{"title":"Develop Blog","authorNickName":"Mr.Jun"}},"markdownRemark":{"id":"77c30d77-417b-5db0-a8a1-4d164fd330ce","excerpt":"img 출처 : http://tcpschool.com/c/c_memory_structure Code 코드 자체를 구성하는 메모리 영역 (.hex .bin .c …) 프로그램 명령이 위치하는 곳 Data 전역변수, 정적변수, 배열, 구조체 등이 저장됨 초기화된 데이터 → Data…","html":"<p><img src=\"https://blog.kakaocdn.net/dn/nW3ga/btqAOKbHyxX/TdNJpZKfI7929WcQXik5ZK/img.png\" alt=\"img\"></p>\n<p>출처 : <a href=\"http://tcpschool.com/c/c_memory_structure\">http://tcpschool.com/c/c_memory_structure</a></p>\n<p><strong>Code</strong></p>\n<ul>\n<li>코드 자체를 구성하는 메모리 영역 (.hex .bin .c …)</li>\n<li>프로그램 명령이 위치하는 곳</li>\n</ul>\n<p><strong>Data</strong></p>\n<ul>\n<li>전역변수, 정적변수, 배열, 구조체 등이 저장됨</li>\n<li>초기화된 데이터 → Data</li>\n<li>\n<p>초기화되지 않은 데이터 → BSS(Block Stated Symbol)</p>\n<p>Data영역은 초기에 사용할 메모리를 확보</p>\n<p>BSS영역은 런타임후에 메모리영역 확보</p>\n</li>\n</ul>\n<p><strong>Heap</strong></p>\n<ul>\n<li>동적으로 메모리를 할당하고자 할 때 위치하는 메모리영역</li>\n<li>C에서 이 영역을 사용하기 위해서 malloc()함수를 사용한다.</li>\n</ul>\n<p><strong>Stack</strong></p>\n<ul>\n<li>임시 메모리 영역으로 지역변수, 매개변수, 리턴 값 등을 저장한다.</li>\n<li>함수호출시 생성되고 함수가 끝나면 시스템에 반환됨</li>\n<li>나중에 넣은 값이 먼저 나오는 후입선출 구조이다.</li>\n</ul>\n<p><strong>Thread</strong></p>\n<ul>\n<li>프로세스가 할당받은 자원을 이용하는 실행단위</li>\n<li>Stack만 따로 할당받고 나머지 영역은 공유한다.</li>\n</ul>\n<p><img src=\"https://blog.kakaocdn.net/dn/cMcEqj/btqASzlOSHI/AaqmLiE7E3eeIk6Kushb1K/img.png\" alt=\"img\">출처 : <a href=\"https://gmlwjd9405.github.io/2018/09/14/process-vs-thread.html\">https://gmlwjd9405.github.io/2018/09/14/process-vs-thread.html</a></p>","frontmatter":{"title":"[Study] User와 Kernel","date":"2020-01-02","category":"Study","tags":["Study","Computer Science"],"cover":{"childImageSharp":{"fluid":{"src":"/static/df3f16ca3475dd62168e61f33cb978be/0f3a1/study.jpg"}}}}}},"pageContext":{"slug":"/Study/메모리의 구조/","previous":{"fields":{"slug":"/Daily/2020.1.1 TID 블로깅 시작/"},"frontmatter":{"title":"[Daily] 2020.1.1 TID 블로깅 시작","tags":["Daily"],"category":"Daily","date":"2020-01-01","cover":{"childImageSharp":{"fixed":{"src":"/static/5c5c2df6f406f24a61aa7d532d8fbee7/31987/daily.png"}}}}},"next":{"fields":{"slug":"/Study/메모리 저장방식/"},"frontmatter":{"title":"[Study] 메모리 저장방식","tags":["Study","Computer Science"],"category":"Study","date":"2020-01-04","cover":{"childImageSharp":{"fixed":{"src":"/static/df3f16ca3475dd62168e61f33cb978be/9a128/study.jpg"}}}}},"recent":[{"node":{"fields":{"slug":"/Study/Exception Handling/"},"frontmatter":{"title":"[Study] Exception Handling","tags":["Study","Java"],"category":"Study","date":"2020-05-06","cover":{"childImageSharp":{"fixed":{"src":"/static/df3f16ca3475dd62168e61f33cb978be/9a128/study.jpg"}}}}}},{"node":{"fields":{"slug":"/Study/메모리 저장방식/"},"frontmatter":{"title":"[Study] 메모리 저장방식","tags":["Study","Computer Science"],"category":"Study","date":"2020-01-04","cover":{"childImageSharp":{"fixed":{"src":"/static/df3f16ca3475dd62168e61f33cb978be/9a128/study.jpg"}}}}}},{"node":{"fields":{"slug":"/Study/메모리의 구조/"},"frontmatter":{"title":"[Study] User와 Kernel","tags":["Study","Computer Science"],"category":"Study","date":"2020-01-02","cover":{"childImageSharp":{"fixed":{"src":"/static/df3f16ca3475dd62168e61f33cb978be/9a128/study.jpg"}}}}}},{"node":{"fields":{"slug":"/Study/User와 Kernel/"},"frontmatter":{"title":"[Study] User와 Kernel","tags":["Study","Computer Science"],"category":"Study","date":"2020-01-01","cover":{"childImageSharp":{"fixed":{"src":"/static/df3f16ca3475dd62168e61f33cb978be/9a128/study.jpg"}}}}}}]}},"staticQueryHashes":["1643656590","2512624605","58195306","765161310"]}