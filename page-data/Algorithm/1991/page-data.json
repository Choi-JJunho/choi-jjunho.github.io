{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/Algorithm/1991/","result":{"data":{"site":{"siteMetadata":{"title":"Develop Blog","authorNickName":"Mr.Jun"}},"markdownRemark":{"id":"fb153183-c3f0-520a-85f8-e8ea6095ef0a","excerpt":"백준 1991번 : 트리 순회 Problem 문제 이진 트리를 입력받아 전위 순회(preorder traversal), 중위 순회(inorder traversal), 후위 순회(postorder traversal)한 결과를 출력하는 프로그램을 작성하시오. img…","html":"<h1>백준 1991번 : 트리 순회</h1>\n<hr>\n<p><a href=\"https://www.acmicpc.net/problem/1991\">Problem</a></p>\n<h2>문제</h2>\n<p>이진 트리를 입력받아 전위 순회(preorder traversal), 중위 순회(inorder traversal), 후위 순회(postorder traversal)한 결과를 출력하는 프로그램을 작성하시오.</p>\n<p><img src=\"https://www.acmicpc.net/JudgeOnline/upload/201007/trtr.png\" alt=\"img\"></p>\n<p>예를 들어 위와 같은 이진 트리가 입력되면,</p>\n<ul>\n<li>전위 순회한 결과 : ABDCEFG // (루트) (왼쪽 자식) (오른쪽 자식)</li>\n<li>중위 순회한 결과 : DBAECFG // (왼쪽 자식) (루트) (오른쪽 자식)</li>\n<li>후위 순회한 결과 : DBEGFCA // (왼쪽 자식) (오른쪽 자식) (루트)</li>\n</ul>\n<p>가 된다.</p>\n<h2>입력</h2>\n<p>첫째 줄에는 이진 트리의 노드의 개수 N(1≤N≤26)이 주어진다. 둘째 줄부터 N개의 줄에 걸쳐 각 노드와 그의 왼쪽 자식 노드, 오른쪽 자식 노드가 주어진다. 노드의 이름은 A부터 차례대로 영문자 대문자로 매겨지며, 항상 A가 루트 노드가 된다. 자식 노드가 없는 경우에는 .으로 표현된다.</p>\n<h2>출력</h2>\n<p>첫째 줄에 전위 순회, 둘째 줄에 중위 순회, 셋째 줄에 후위 순회한 결과를 출력한다. 각 줄에 N개의 알파벳을 공백 없이 출력하면 된다.</p>\n<h2>예제 입력 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">7\nA B C\nB D .\nC E F\nE . .\nF . G\nD . .\nG . .</code></pre></div>\n<h2>예제 출력 1</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ABDCEFG\nDBAECFG\nDBEGFCA</code></pre></div>\n<hr>\n<h2>풀이</h2>\n<p>재귀를 맛깔나게 쓰면 간단하게 풀 수 있다.</p>\n<h2>코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * 백준 1991번 문제\n * https://www.acmicpc.net/problem/1991\n */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    Node <span class=\"token operator\">*</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    Node <span class=\"token operator\">*</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nNode arr<span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 전위순회</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">preorder</span><span class=\"token punctuation\">(</span>Node n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node current <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 루트 -> 왼쪽 자식 -> 오른쪽 자식</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">preorder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">preorder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 중위순회</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>Node n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node current <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 왼쪽자식 -> 루트 -> 오른쪽 자식</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 후위순회</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">postorder</span><span class=\"token punctuation\">(</span>Node n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node current <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 왼쪽 자식 -> 오른쪽 자식 -> 루트</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">postorder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">postorder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> M<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" %c %c %c\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span>M <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> M<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">!=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span>\n            arr<span class=\"token punctuation\">[</span>M <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>L <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>R <span class=\"token operator\">!=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span>\n            arr<span class=\"token punctuation\">[</span>M <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>R <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">preorder</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">postorder</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"백준 1991번 : 트리 순회","date":"2020-09-02","category":"Algorithm","tags":["algorithm"],"cover":{"childImageSharp":{"fluid":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/46604/algorithm.png"}}}}}},"pageContext":{"slug":"/Algorithm/1991/","previous":{"fields":{"slug":"/Algorithm/2960/"},"frontmatter":{"title":"백준 2960번 : 에라토스테네스의 체","tags":["algorithm"],"category":"Algorithm","date":"2020-07-09","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}},"next":{"fields":{"slug":"/Algorithm/2660/"},"frontmatter":{"title":"백준 2660번 : 회장뽑기","tags":["algorithm"],"category":"Algorithm","date":"2020-09-10","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}},"recent":[{"node":{"fields":{"slug":"/Algorithm/10174/"},"frontmatter":{"title":"백준 10174번 : 팰린드롬","tags":["algorithm"],"category":"Algorithm","date":"2020-10-28","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}}},{"node":{"fields":{"slug":"/Algorithm/1431/"},"frontmatter":{"title":"백준 1431번 : 시리얼 번호","tags":["algorithm"],"category":"Algorithm","date":"2020-10-28","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}}},{"node":{"fields":{"slug":"/Algorithm/1676/"},"frontmatter":{"title":"백준 1676번 : 팩토리얼 0의 개수","tags":["algorithm"],"category":"Algorithm","date":"2020-10-28","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}}},{"node":{"fields":{"slug":"/Algorithm/1931/"},"frontmatter":{"title":"백준 1931번 : 회의실 배정","tags":["algorithm"],"category":"Algorithm","date":"2020-10-28","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}}}]}},"staticQueryHashes":["1643656590","2512624605","58195306","765161310"]}