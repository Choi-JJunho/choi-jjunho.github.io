{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/Algorithm/쇠막대기/","result":{"data":{"site":{"siteMetadata":{"title":"Develop Blog","authorNickName":"Mr.Jun"}},"markdownRemark":{"id":"6461d0d1-0b66-5b19-b18c-284baecd746a","excerpt":"…","html":"<p><strong>문제 설명</strong></p>\n<p>여러 개의 쇠막대기를 레이저로 절단하려고 합니다. 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자릅니다. 쇠막대기와 레이저의 배치는 다음 조건을 만족합니다.</p>\n<p>- 쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있습니다. - 쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓습니다. - 각 쇠막대기를 자르는 레이저는 적어도 하나 존재합니다. - 레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않습니다.</p>\n<p>아래 그림은 위 조건을 만족하는 예를 보여줍니다. 수평으로 그려진 굵은 실선은 쇠막대기이고, 점은 레이저의 위치, 수직으로 그려진 점선 화살표는 레이저의 발사 방향입니다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/pgTra/btqB10cjuD8/e4DhkuVIJ78mevfOgvlp0k/img.png\" alt=\"img\"></p>\n<p>이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있습니다.</p>\n<p>(a) 레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 ’()‘으로 표현합니다. 또한 모든 ’()‘는 반드시 레이저를 표현합니다. (b) 쇠막대기의 왼쪽 끝은 여는 괄호 ’(‘로, 오른쪽 끝은 닫힌 괄호 ’)‘로 표현됩니다.</p>\n<p>위 예의 괄호 표현은 그림 위에 주어져 있습니다.\n쇠막대기는 레이저에 의해 몇 개의 조각으로 잘리는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘리고, 이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘립니다.</p>\n<p>쇠막대기와 레이저의 배치를 표현한 문자열 arrangement가 매개변수로 주어질 때, 잘린 쇠막대기 조각의 총 개수를 return 하도록 solution 함수를 작성해주세요.</p>\n<p><strong>제한사항</strong></p>\n<ul>\n<li>arrangement의 길이는 최대 100,000입니다.</li>\n<li>arrangement의 여는 괄호와 닫는 괄호는 항상 쌍을 이룹니다.</li>\n</ul>\n<p><strong>입출력 예</strong></p>\n<p>arrangementreturn</p>\n<table>\n<thead>\n<tr>\n<th>()(((()())(())()))(())</th>\n<th>17</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><strong>코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>string arrangement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>\n    v<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> arrangement<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>arrangement<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        temp <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        v<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">==</span> <span class=\"token string\">'('</span> <span class=\"token operator\">&amp;&amp;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            a<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            b<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            a<span class=\"token operator\">-=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">==</span> <span class=\"token string\">'('</span> <span class=\"token operator\">&amp;&amp;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            v<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            answer <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        answer<span class=\"token operator\">+=</span>b<span class=\"token punctuation\">;</span>\n    \n    \n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/42585\">https://programmers.co.kr/learn/courses/30/lessons/42585</a></p>","frontmatter":{"title":"[Programmers] 쇠막대기","date":"2020-02-17","category":"Algorithm","tags":["algorithm"],"cover":{"childImageSharp":{"fluid":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/46604/algorithm.png"}}}}}},"pageContext":{"slug":"/Algorithm/쇠막대기/","previous":{"fields":{"slug":"/Algorithm/2750/"},"frontmatter":{"title":"백준 2750번 : 수 정렬하기","tags":["algorithm"],"category":"Algorithm","date":"2020-02-12","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}},"next":{"fields":{"slug":"/Algorithm/3052/"},"frontmatter":{"title":"백준 3052번 : 나머지","tags":["algorithm"],"category":"Algorithm","date":"2020-02-19","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}},"recent":[{"node":{"fields":{"slug":"/Algorithm/10174/"},"frontmatter":{"title":"백준 10174번 : 팰린드롬","tags":["algorithm"],"category":"Algorithm","date":"2020-10-28","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}}},{"node":{"fields":{"slug":"/Algorithm/1431/"},"frontmatter":{"title":"백준 1431번 : 시리얼 번호","tags":["algorithm"],"category":"Algorithm","date":"2020-10-28","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}}},{"node":{"fields":{"slug":"/Algorithm/1676/"},"frontmatter":{"title":"백준 1676번 : 팩토리얼 0의 개수","tags":["algorithm"],"category":"Algorithm","date":"2020-10-28","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}}},{"node":{"fields":{"slug":"/Algorithm/1931/"},"frontmatter":{"title":"백준 1931번 : 회의실 배정","tags":["algorithm"],"category":"Algorithm","date":"2020-10-28","cover":{"childImageSharp":{"fixed":{"src":"/static/5bc138257b1877df8b6bf7417a14541b/31987/algorithm.png"}}}}}}]}},"staticQueryHashes":["1643656590","2512624605","58195306","765161310"]}