{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/Language/[C언어] 전처리기/","result":{"data":{"site":{"siteMetadata":{"title":"Develop Blog","authorNickName":"Mr.Jun"}},"markdownRemark":{"id":"d7f71af7-6409-5cb2-aa2c-5744dec5e049","excerpt":"컴파일러가 컴파일 하기전 처리하는 부분이다. 표준 라이브러리는 <>로 감싼다. #include <~.h> → 검색 대상 비표준 라이브러리는 “”로 감싼다. #include “~.h…","html":"<ul>\n<li>컴파일러가 컴파일 하기전 처리하는 부분이다.</li>\n<li>\n<p>표준 라이브러리는 &#x3C;>로 감싼다.</p>\n<ul>\n<li>#include &#x3C;~.h> → 검색 대상</li>\n</ul>\n</li>\n<li>\n<p>비표준 라이브러리는 “”로 감싼다.</p>\n<ul>\n<li>#include “~.h” → 현재 폴더</li>\n<li>큰따옴표 내부에 절대경로 혹은 상대경로로 표시해 줄 수 있다.</li>\n<li>상대경로의 경우 시스템에 등록된 경로에서 찾는다.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://blog.kakaocdn.net/dn/b4C5rd/btqAWbZpYY1/Uu0YY6bebKzi4kkEiwxVN0/img.png\" alt=\"img\">Visual Studio에서 상대경로 지정 항목</p>\n<p>전처리문 종류</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span></span></code></pre></div>\n<ul>\n<li>파일 처리를 위한 전처리문</li>\n<li>미리 정의되어있는 파일을 Load한다. (매크로같이 치환 개념이 아님)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span></span></code></pre></div>\n<ul>\n<li>상수값을 지정하기 위한 예약어 (매크로 → 치환의 개념)</li>\n<li>함수처럼 선언할 수 있지만 함수가 아니기때문에 함수처럼 오버헤드가 일어나지 않는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span></span></code></pre></div>\n<ul>\n<li>#define으로 정의된 매크로를 무효화한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">/</span> #endif</span></span></code></pre></div>\n<ul>\n<li>조건문과 동작 원리는 같다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">somthing</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">somthing</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">something_else <span class=\"token number\">10</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\">something1</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ssomething_else <span class=\"token number\">20</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<ul>\n<li>if define somthing~ 의 의미로 이 역시 조건문과 동작원리는 같다.</li>\n<li>#elif 는 else if 와 유사</li>\n<li>ifndef는 ifdef와는 정반대로 정의되어있지 않으면 발생하는 전처리기다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#error</code></pre></div>\n<ul>\n<li>소스라인에 직접 에러메시지를 출력한다.</li>\n<li>전처리기가 #error문을 만나면 컴파일을 중단하고 에러메시지를 출력한다.</li>\n<li>\n<p>ERROR : XXXXX.c ########: Error directive: 내용</p>\n<ul>\n<li>XXXXX.c → 현재 컴파일 중인 파일명#error</li>\n<li>####### → 전처리기가 #error 문을 만난 시점에서의 행 번호(헤더 포함)</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">line</span></span></code></pre></div>\n<ul>\n<li>소스코드의 행번호를 지정한다.</li>\n<li>컴파일러에 의해 미리 정의된 <strong>LINE</strong>과 함께 사용된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></code></pre></div>\n<ul>\n<li>해당 헤더 파일이 한번만 빌드되도록 한다.</li>\n<li>2개 이상의 헤더파일을 include 할 때 한번만 되도록 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"*lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></code></pre></div>\n<ul>\n<li>해당 라이브러리를 링크시켜주는 기능을한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>disable<span class=\"token operator\">:</span><span class=\"token number\">4716</span><span class=\"token punctuation\">)</span></span></span></code></pre></div>\n<ul>\n<li>특정 경고메시지를 무사하는 명령어</li>\n</ul>","frontmatter":{"title":"[C언어] 전처리기","date":"2020-01-05","category":"Language","tags":["Language","C"],"cover":{"childImageSharp":{"fluid":{"src":"/static/5dc22da92b40fc0ec8d9725363514341/46604/language.png"}}}}}},"pageContext":{"slug":"/Language/[C언어] 전처리기/","previous":{"fields":{"slug":"/Study/메모리 저장방식/"},"frontmatter":{"title":"[Study] 메모리 저장방식","tags":["Study","Computer Science"],"category":"Study","date":"2020-01-04","cover":{"childImageSharp":{"fixed":{"src":"/static/df3f16ca3475dd62168e61f33cb978be/9a128/study.jpg"}}}}},"next":{"fields":{"slug":"/Language/[C++] 참조형 변수/"},"frontmatter":{"title":"[C++언어] 참조형 변수","tags":["Language","C++"],"category":"Language","date":"2020-01-07","cover":{"childImageSharp":{"fixed":{"src":"/static/5dc22da92b40fc0ec8d9725363514341/31987/language.png"}}}}},"recent":[{"node":{"fields":{"slug":"/Language/[C++] 참조형 변수/"},"frontmatter":{"title":"[C++언어] 참조형 변수","tags":["Language","C++"],"category":"Language","date":"2020-01-07","cover":{"childImageSharp":{"fixed":{"src":"/static/5dc22da92b40fc0ec8d9725363514341/31987/language.png"}}}}}},{"node":{"fields":{"slug":"/Language/[C언어] 전처리기/"},"frontmatter":{"title":"[C언어] 전처리기","tags":["Language","C"],"category":"Language","date":"2020-01-05","cover":{"childImageSharp":{"fixed":{"src":"/static/5dc22da92b40fc0ec8d9725363514341/31987/language.png"}}}}}}]}},"staticQueryHashes":["1643656590","2512624605","58195306","765161310"]}